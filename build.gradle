plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.7'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'org.openapi.generator' version '7.6.0'
    id 'nu.studer.jooq' version '10.1'
    id 'org.flywaydb.flyway' version '11.9.1'
}

group = 'com'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    flywayMigration
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'

    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.9'

    implementation 'org.flywaydb:flyway-core:11.9.1'
    flywayMigration 'com.h2database:h2:2.3.232'

    implementation 'com.opencsv:opencsv:5.11.2'

    jooqGenerator 'com.h2database:h2:2.3.232'
    jooqGenerator 'org.jooq:jooq-meta:3.19.1'

    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'com.h2database:h2'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

sourceSets {
    main {
        java {
            srcDir "$rootDir/generated/src/main/java"
        }
    }
}

flyway {
    configurations = ['flywayMigration']
    url = 'jdbc:h2:~/testdb'
    user = 'sa'
    password = ''
    cleanDisabled = false
}

jooq {
    version = '3.19.1'

    configurations {
        main {
            generationTool {
                jdbc {
                    driver = 'org.h2.Driver'
                    url = flyway.url
                    user = flyway.user
                    password = flyway.password
                }
                generator {
                    name = 'org.jooq.codegen.DefaultGenerator'
                    database {
                        name = 'org.jooq.meta.h2.H2Database'
                        includes = '.*'
                        excludes = 'information_schema.*'
                    }
                    target {
                        packageName = 'com.planitsquaretest'
                        directory = "$rootDir/generated/src/main/java"
                    }
                    generate {
                        deprecated = false
                        records = true
                        fluentSetters = true
                    }
                }
            }
        }
    }
}

tasks.named('generateJooq').configure {
    dependsOn tasks.named('flywayMigrate')

    inputs.files(fileTree('src/main/resources/db/migration'))
            .withPropertyName('migrations')
            .withPathSensitivity(PathSensitivity.RELATIVE)

    allInputsDeclared = true
}

// openapi-generator
openApiGenerate {
    generatorName = "spring"
    inputSpec = "$rootDir/src/main/resources/openapi/merged.yaml"
    outputDir = "$rootDir/generated"
    apiPackage = "com.planitsquaretest.api"
    modelPackage = "com.planitsquaretest.model"
    invokerPackage = "com.planitsquaretest.invoker"
    configOptions = [
            useJakartaEe        : "true",
            interfaceOnly       : "true",
            skipDefaultInterface: "true",
            useTags             : "true",
            openApiNullable     : "false",
            useResponseEntity   : "false",
            hideGenerationTimestamp: "false"
    ]
}

tasks.named("compileJava") {
    dependsOn("openApiGenerate")
}
tasks.named("build") {
    dependsOn("openApiGenerate")
}

tasks.named("test") {
    useJUnitPlatform()
}

// mergeOpenApi는 수동 실행만 허용 (swagger-cli가 설치되어 있어야 작동함)
tasks.register('mergeOpenApi', Exec) {
    group = "openapi"
    description = "OpenApi Yaml 파일 조합하기"
    commandLine "sh", "-c", "swagger-cli bundle src/main/resources/openapi/openapi.yaml -o src/main/resources/openapi/merged.yaml -t yaml"
}
